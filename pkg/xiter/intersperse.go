//go:build go1.23

package xiter

import "iter"

// Intersperse creates a new iterator which places a separator between adjacent items of the original iterator.
func Intersperse[T any](x iter.Seq[T], sep T) iter.Seq[T] {
	return func(yield func(T) bool) {
		first := true

		for v := range x {
			if first {
				first = false
			} else {
				if !yield(sep) {
					break
				}
			}

			if !yield(v) {
				break
			}
		}
	}
}

// IntersperseFunc creates a new iterator which places a separator between adjacent items of the original iterator.
func IntersperseFunc[T any](sep T) MappingFunc[T, T] {
	return bind2(Intersperse, sep)
}

// IntersperseWith creates a new iterator which places an item generated by separator between adjacent items of the original iterator.
func IntersperseWith[T any](x iter.Seq[T], f func() T) iter.Seq[T] {
	return func(yield func(T) bool) {
		first := true

		for v := range x {
			if first {
				first = false
			} else {
				if !yield(f()) {
					break
				}
			}

			if !yield(v) {
				break
			}
		}
	}
}

// IntersperseWithFunc creates a new iterator which places an item generated by separator between adjacent items of the original iterator.
func IntersperseWithFunc[T any](f func() T) MappingFunc[T, T] {
	return bind2(IntersperseWith, f)
}
