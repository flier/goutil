//go:build go1.23

package xiter

import "iter"

// FromIndex returns an infinite iterator of numbers starting from the given index n.
func FromIndex[T Number](n T) iter.Seq[T] {
	return func(yield func(T) bool) {
		for yield(n) {
			n += 1
		}
	}
}

// FromIndexBy returns an iterator of values generated by repeatedly applying the given function f to an initial value.
func FromIndexBy[T Number](n T, f func(T) T) iter.Seq[T] {
	return func(yield func(T) bool) {
		for yield(f(n)) {
			n += 1
		}
	}
}

// FromFunc returns an iterator that yields values from the provided function f.
func FromFunc[T any](f func() (T, bool)) iter.Seq[T] {
	return func(yield func(T) bool) {
		for {
			v, ok := f()
			if !ok {
				break
			}

			if !yield(v) {
				break
			}
		}
	}
}

// FromFunc2 returns an iterator that yields values from the provided function f.
func FromFunc2[K, V any](f func() (K, V, bool)) iter.Seq2[K, V] {
	return func(yield func(K, V) bool) {
		for {
			k, v, ok := f()
			if !ok {
				break
			}

			if !yield(k, v) {
				break
			}
		}
	}
}

// FromChan returns an iterator that yields values from the provided channel ch.
//
// The iterator will continue to yield values until the channel is closed.
func FromChan[T any](ch <-chan T) iter.Seq[T] {
	return func(yield func(T) bool) {
		for {
			v, ok := <-ch
			if !ok {
				break
			}

			if !yield(v) {
				break
			}
		}
	}
}
