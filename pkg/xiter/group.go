//go:build go1.23

package xiter

import "iter"

// GroupBy makes a map that returns consecutive keys and groups from the sequence.
func GroupBy[T comparable](x iter.Seq[T]) map[T][]T {
	m := make(map[T][]T)

	for v := range x {
		m[v] = append(m[v], v)
	}

	return m
}

// GroupByKey groups elements from the provided sequence `x` into a map based on a key
// generated by the function `f`. Each key in the resulting map corresponds to a slice
// of elements from `x` that share the same key.
//
// Type Parameters:
//
//	T - the type of elements in the input sequence.
//	K - the type of the key, which must be comparable.
//
// Parameters:
//
//	x - an iter.Seq[T], representing the input sequence of elements.
//	f - a function that takes an element of type T and returns a key of type K.
//
// Returns:
//
//	A map[K][]T where each key is produced by `f` and the value is a slice of all
//	elements from `x` that map to that key.
func GroupByKey[T any, K comparable](x iter.Seq[T], f func(T) K) map[K][]T {
	m := make(map[K][]T)

	for v := range x {
		k := f(v)

		m[k] = append(m[k], v)
	}

	return m
}
