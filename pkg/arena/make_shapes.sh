#!/bin/bash

FILE=$1
MAX=$2

cat > $FILE <<EOF
// Code generated by $0. DO NOT EDIT.

package arena

import (
	"reflect"
	"unsafe"
)

// Pre-allocate a shape for every power of 2.
var shapes = [...]reflect.Type{
	// Doing it like this forces Go to statically generate type information,
	// which makes reflect.New much faster, because it does not need to hammer
	// the dynamically-generated-type cache, either for the {[]byte, unsafe.Pointer}
	// type or for its associated *struct{[N]byte; unsafe.Pointer} pointer type.
EOF

for i in $(seq 0 $MAX); do
    echo "	reflect.TypeOf((*struct {D [1 << $i]byte; P unsafe.Pointer})(nil)).Elem()," >> $FILE
done

cat >> $FILE <<EOF
	// Any larger than this will cause Go to emit a build error.
	// This also currently prevents builds on 32-bit targets.
}
EOF